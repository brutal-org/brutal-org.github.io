<article>

    <h1>Milestone 3 - Bootloader, PCIe, ACPI and IPCs</h1>

    <div class="date">
        2021.11.21
    </div>

    <img src="ms3.png" alt="">

    <p>
        It's been a while since a new milestone has passed... And this one was the longest and most massive milestone
        we've done. It's about 500 commits and more than 15000 lines of code!
        The key points of this milestone are:
    </p>

    <ul class="list-inside list-disc">
        <li>The finalization of the UEFI bootloader;</li>
        <li>The interface definition language: BID;</li>
        <li>Basic PCIe and ACPI support;</li>
        <li>Interrupt routing to userspace;</li>
        <li>Fibers;</li>
        <li>The beginning of a home-made C compiler;</li>
        <li>A rasterizer;</li>
        <li>The start of a VirtIO driver;</li>
        <li>And many more...</li>
    </ul>

    <h2>
        Acknowledgements
    </h2>

    <div class="flex justify-center">
        <img class="p-0 h-48 w-48" src="ms3-thanks.png" alt="">
    </div>


    <p>
        First, I (supercyp) wanted to thank everyone that helped Brutal reach this state.
        Thanks to d0p1 for starting to work on the network stack, Quentincestino for working on the VirtIO driver,
        thanks also to sleepy_monax who let me write this article and <a class="link"
            href="https://github.com/brutal-org/brutal/graphs/contributors">everyone else</a> who contributed to this
        milestone!
    </p>

    <h2>The UEFI Bootloader</h2>

    <p>
        Next, Brutal is now able to boot from our in house bootloader. This means we are
        completely dependency free at runtime!
    </p>

    <img src="ms3-boot.png" alt="">

    <h2>
        BID, The Brutal Interface Definition Language
    </h2>

    <div class="flex justify-center">
        <img class="p-0 h-48 w-48" src="ms3-bid.png" alt="">
    </div>

    <p>
        Then, the most important part of this milestone : BID. It's a language that allows to define an interface for a
        server.
        <br>
        For example, here is the interface description for a simple filesystem server:
    </p>

    <pre>
interface Fs
{
    type Path: Str;
    type Handle: U32;

    method open Path -> Handle;

    method stat Handle -> {
        name : Str,
        size : Size,
        date : Str
    };

    method read Handle -> Buf;

    method write {
        handle: Handle,
        buf: Buf
    } -> Size;
}</pre>

    <p>
        With this, BID is able to generate C code for the server and for the client. Simplifying programming an
        interaction
        between a server and a client.
    </p>

    <pre>
Str path = str$("/home/user/todo.txt");
FsHandle handle;

FsResult result = fs_open_file(fs_server, &path, &handle, alloc);

if (result != FS_SUCESS)
{
    panic$("Can't open file 'todo.txt'");
}</pre>
    <p>
        We have also developed a small visual studio code extension that allows basic syntax highlighting!
    </p>


    <h2>
        The C compiler
    </h2>

    <div class="flex justify-center">
        <img class="p-0 h-48 w-48" src="ms3-cc.png" alt="">
    </div>

    <p>
        Lately, we have started building a C compiler. This compiler, will feature some extensions (mainly lambdas and
        modules) that will simplify
        the
        development of Brutal.
    </p>

    <p>
        For the moment we have a work in progress parser able to generate an AST. And we are able to convert this AST
        back to
        C code (This is used by BID
        for
        generating C code).
    </p>

    <h2>
        Fibers
    </h2>

    <div class="flex justify-center">
        <img class="p-0 h-48 w-48" src="ms3-fibers.png" alt="">
    </div>

    <pre>Fiber* fiber = fiber_start(entry_point, context);
fiber_yield();
void* result = fiber_await(fiber);</pre>

    <p>
        Next in this milestone, we have fibers. Fibers are lightweight cooperative threads and are used as the
        foundation
        of our async APIs.
        We also got them working on linux!
    </p>


    <h2>
        Miscellaneous Improvements
    </h2>

    <p>
        Finally, we built a PCIe server, ACPI server, and added interrupt routing to userspace in the kernel.
        This means that we are able to write device drivers in userspace!
        Right now we have only a proof of concept P/S 2 driver.
    </p>

    <h2>
        What's Next?
    </h2>

    <p>
        Milestone 4 will focus on building the network and storage stack, improve the stability of the
        kernel, and build a basic shell.

        <br>
        This roadmap is not set in stone, and is subject to changes. You might want to check out the
        <a class="link" href="https://github.com/brutal-org/brutal/blob/main/book/roadmap.md">latest version of the
            roadmap</a>.
    </p>

    <h2>
        Contributing
    </h2>

    <p>
        We welcome all contribution even if they don't fit into our milestones :)
        The Git repository is available <a class="link" href="https://github.com/brutal-org/brutal">on GitHub</a>
        and you can chat with us on the <a class="link" href="http://discord.skiftos.org">Brutal discord
            server</a>, or if you speak french on the <a class="link" href="https://discord.com/invite/3XjkM6q">DEVSE
            discord server</a>.
    </p>

    <p>
        Thanks for reading and happy hacking!
    </p>
</article>
