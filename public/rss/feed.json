{
    "version": "https://jsonfeed.org/version/1",
    "title": "Brutal Blog",
    "home_page_url": "https://brutal.smnx.sh",
    "feed_url": "https://brutal.smnx.sh/rss/feed.json",
    "icon": "https://brutal.smnx.sh/favicon.svg",
    "author": {
        "name": "Brutal"
    },
    "items": [
        {
            "id": "https://brutal.smnx.sh/articles/public/articles/milestone-1/content",
            "content_html": "<p>After a month of work and 320 commits the BRUTAL operating system has reached Milestone 1, but what does it mean? It means that we have a working kernel capable of supporting userspace applications, complete with multitasking, memory management, syscalls, SMP, and much more...</p>\n<h2>What's next?</h2>\n<p>Milestone 2 will focus on implementing the IPC System, shell, basic VFS and ramdisk. This roadmap is not set in stone and is subject to changes. You might want to check out the <a href=\"https://github.com/brutal-org/brutal/blob/main/meta/roadmap.md\">latest version of the roadmap</a></p>\n<h2>Acknowledgements</h2>\n<p>I (sleepy_monax) would like to thanks everyone who helped during this first milestone. First I want to thanks Supercyp for all the work he did on the kernel. He most notably implemented the SMP, the scheduling and many more features. Next keyboard slayer for porting the system to clang and the APIC timer implementation. Finaly Abbix for his UBSAN implementation.</p>\n<h2>Contributing</h2>\n<p>We welcome all contribution even if they don't fit into our milestones :) The Git repository is available <a href=\"https://github.com/brutal-org/brutal\">on GitHub</a> and you can discuss about BRUTAL on the <a href=\"http://discord.skiftos.org\">brutal discord server</a>.</p>\n<p>Thanks for reading and happy hacking :^)</p>\n",
            "url": "https://brutal.smnx.sh/articles/public/articles/milestone-1/content",
            "title": "Milestone 1",
            "summary": "To Userspace and Beyond",
            "image": "https://brutal.smnx.sh/articles/milestone-1/cover.png",
            "author": {
                "name": "Sleepy Monax"
            }
        },
        {
            "id": "https://brutal.smnx.sh/articles/public/articles/milestone-2/content",
            "content_html": "<p>Another month, another Milestone. While the development has slowed down due to many people going on holiday, we still managed to fit many features in. We fixed many bugs and oversight, implementing the kernel's syscall interface, IPC subsystem, and from the user's point of view brutal is now able to display a logo during boot.</p>\n<p><img src=\"/articles/milestone-2/boot.png\" alt=\"\"></p>\n<h2>EFI bootloader</h2>\n<p>Abbix has started an EFI based bootloader for BRUTAL, it's not able the load our kernel yet, but the protocol is improving quickly and is already capable of loading a simple &quot;Hello, world!&quot; kernel. The best of all, it's configured in Scheme, a Lisp dialect.</p>\n<p><img src=\"/articles/milestone-2/bootloader.png\" alt=\"\"></p>\n<h2>Udfore</h2>\n<p>Our Scheme implementation is called udfore, it features some syntactic sugar to reduce the amount of () needed and makes code more readable for non Lisp enlightened persons.</p>\n<pre><code>use 'std-base;\nuse 'std-algo;\nuse 'std-io;\n\ndef (fizzbuzz i : Int) : Str {\n    match ((% i 3) (% i 5))\n    {\n        (0 0) : &quot;fizz buzz&quot;;\n        (_ 0) : &quot;buzz&quot;;\n        (0 _) : &quot;fizz&quot;;\n        default : (str i);\n    };\n};\n\ndisplay (map fizzbuzz (range 1 100));\n</code></pre>\n<h2>What's next?</h2>\n<p>Milestone 3 will focus on the ACPI, PCIe and Virt-IO sub-systems. This roadmap is not set in stone and is subject to changes. You might want to check out the <a href=\"https://github.com/brutal-org/brutal/blob/main/meta/roadmap.md\">latest version of the roadmap</a>.</p>\n<h2>Acknowledgements</h2>\n<p>I (sleepy_monax) would like to thanks everyone who helped during this second milestone. Like Supercyp for all the bug fix he did in the kernel and the work he did on the interface description language, and Abbix for his work on the bootloader.</p>\n<h2>Contributing</h2>\n<p>We welcome all contribution even if they don't fit into our milestones :) The Git repository is available <a href=\"https://github.com/brutal-org/brutal\">on GitHub</a> and you can discuss about BRUTAL on the <a href=\"http://discord.skiftos.org\">brutal discord server</a>.</p>\n<p>Thanks for reading and happy hacking :^)</p>\n",
            "url": "https://brutal.smnx.sh/articles/public/articles/milestone-2/content",
            "title": "Milestone 2",
            "summary": "Userspace, IPC, and Syscalls",
            "image": "https://brutal.smnx.sh/articles/milestone-2/cover.png",
            "author": {
                "name": "Sleepy Monax"
            }
        },
        {
            "id": "https://brutal.smnx.sh/articles/public/articles/milestone-3/content",
            "content_html": "<p>It's been a while since a new milestone has passed... And this one was the longest and most massive milestone we've done. It's about 500 commits and more than 15000 lines of code! The key points of this milestone are:</p>\n<ul>\n<li>The finalization of the UEFI bootloader;</li>\n<li>The interface definition language: BID;</li>\n<li>Basic PCIe and ACPI support;</li>\n<li>Interrupt routing to userspace;</li>\n<li>Fibers;</li>\n<li>The beginning of a home-made C compiler;</li>\n<li>A rasterizer;</li>\n<li>The start of a VirtIO driver;</li>\n<li>And many more...</li>\n</ul>\n<h2>Acknowledgements</h2>\n<p><img src=\"/articles/milestone-3/thanks.png\" alt=\"\"></p>\n<p>First, I (supercyp) wanted to thank everyone that helped Brutal reach this state. Thanks to d0p1 for starting to work on the network stack, Quentincestino for working on the VirtIO driver, Abbix for correcting the spelling mistakes in this article, thanks also to sleepy_monax who let me write this article and &lt;a href=&quot;https://github.com/brutal-org/brutal/graphs/contributors&quot;&gt;everyone else&lt;/a&gt; who contributed to this milestone!</p>\n<h2>The UEFI Bootloader</h2>\n<p>Next, Brutal is now able to boot from our in house bootloader. This means we are\ncompletely dependency free at runtime!</p>\n<p><img src=\"/articles/milestone-3/boot.png\" alt=\"\"></p>\n<h2>BID, The Brutal Interface Definition Language</h2>\n<p><img src=\"/articles/milestone-3/bid.png\" alt=\"\"></p>\n<p>Then, the most important part of this milestone: BID. It's a language that allows to define an interface for a server.</p>\n<p>For example, here is the interface description for a simple filesystem server:</p>\n<pre><code>interface Fs\n{\n    type Path: Str;\n    type Handle: U32;\n\n    method open Path -&gt; Handle;\n\n    method stat Handle -&gt; {\n        name : Str,\n        size : Size,\n        date : Str\n    };\n\n    method read Handle -&gt; Buf;\n\n    method write {\n        handle: Handle,\n        buf: Buf\n    } -&gt; Size;\n}\n</code></pre>\n<p>With this, BID is able to generate C code for the server and for the client. Simplifying programming an interaction between a server and a client.</p>\n<pre><code>Str path = str$(&quot;/home/user/todo.txt&quot;);\nFsHandle handle;\n\nFsResult result = fs_open_file(fs_server, &amp;path, &amp;handle, alloc);\n\nif (result != FS_SUCESS)\n{\n    panic$(&quot;Can't open file 'todo.txt'&quot;);\n}\n</code></pre>\n<p>We have also developed a small visual studio code extension that allows basic syntax highlighting!</p>\n<h2>The C compiler</h2>\n<p><img src=\"/articles/milestone-3/cc.png\" alt=\"\"></p>\n<p>Lately, we have started building a C compiler. This compiler, will feature some extensions (mainly lambdas and modules) that will simplify the development of Brutal.</p>\n<p>For the moment we have a work in progress parser able to generate an AST. And we are able to convert this AST back to C code (This is used by BID for generating C code).</p>\n<h2>Fibers</h2>\n<p><img src=\"/articles/milestone-3/fibers.png\" alt=\"\"></p>\n<pre><code>Fiber* fiber = fiber_start(entry_point, context);\nfiber_yield();\nvoid* result = fiber_await(fiber);\n</code></pre>\n<p>Next in this milestone, we have fibers. Fibers are lightweight cooperative threads and are used as the foundation of our async APIs. We also got them working on linux!</p>\n<h2>Miscellaneous Improvements</h2>\n<p>Finally, we built a PCIe server, ACPI server, and added interrupt routing to userspace in the kernel. This means that we are able to write device drivers in userspace! Right now we have only a proof of concept P/S 2 driver.</p>\n<h2>What's Next?</h2>\n<p>Milestone 4 will focus on building the network and storage stack, improve the stability of the kernel, and build a basic shell.</p>\n<p>This roadmap is not set in stone, and is subject to changes. You might want to check out the <a href=\"https://github.com/brutal-org/brutal/blob/main/meta/roadmap.md\">latest version of the roadmap</a>.</p>\n<h2>Contributing</h2>\n<p>We welcome all contribution even if they don't fit into our milestones :) The Git repository is available <a href=\"https://github.com/brutal-org/brutal\">on GitHub</a> and you can discuss about BRUTAL on the <a href=\"http://discord.skiftos.org\">brutal discord server</a>.</p>\n<p>Thanks for reading and happy hacking!</p>\n",
            "url": "https://brutal.smnx.sh/articles/public/articles/milestone-3/content",
            "title": "Milestone 3",
            "summary": "Bootloader, PCIe, ACPI, and IPCs",
            "image": "https://brutal.smnx.sh/articles/milestone-3/cover.png",
            "author": {
                "name": "Supercyp"
            }
        },
        {
            "id": "https://brutal.smnx.sh/articles/public/articles/milestone-4/content",
            "content_html": "<h2>Graphical User Interface Library</h2>\n<p>In the last milestone post, we said that milestone four would focus on the network and storage stack. Well, we got a bit sidetracked and instead got a GUI rolling.</p>\n<p><img src=\"/articles/milestone-4/desktop.png\" alt=\"The BRUTAL Desktop\"></p>\n<p>We are introducing brutal-GUI, a cross-platform user interface library for BRUTAL, Linux, macOS, and probably any other platform where SDL is supported. It supports flexbox-inspired layout, right-to-left, left-to-right layout, and simple widgets like icons, images, buttons, and labels.</p>\n<p>We built brutal-GUI on top of brutal-GFX, a vector-based graphic library implementing affine transforms, SVG paths, vector fonts, and gradients. This library was a joint effort of me (sleepy_monax), Supercyp, which helped improve performance, and Feliwir, who worked on vector fonts support.</p>\n<p><img src=\"/articles/milestone-4/svg-path.png\" alt=\"Demonstration of SVG support\"></p>\n<p><img src=\"/articles/milestone-4/vector-font.png\" alt=\"Demonstration of Vector fonts support\"></p>\n<h2>New Website</h2>\n<p>You might have noticed, but we have a new website! It's built on state-of-the-art web technologies like Next, React, TailwindCSS, and MDX. This might look overkill for a simple blog, and you might be correct, but we have big plans for the future ;)</p>\n<h2>Compiler</h2>\n<p>Our compiler got a lot of love during this release cycle, and one of the highlights is the error reporting inspired by the rust compiler:</p>\n<p><img src=\"/articles/milestone-4/error-reporting.png\" alt=\"Error reporting\"></p>\n<p>This is still a work in progress and at a PR state.</p>\n<h2>Storage Stack</h2>\n<p>While disks and file systems were finally not the focus of this milestone, BRUTAL gained rudimentary support for AHCI and EXT2 thanks to Supercyp. And this effort will continue onto milestone five.</p>\n<h2>RISC-V Support</h2>\n<p>We started working on RISC-V support, it's still early, but we have VMM, interrupts and device tree, and UART working.</p>\n<h2>IPC Subsystem</h2>\n<p>Our IPC subsystem got a substantial overhaul. Now the system is split into components that communicate using capabilities. Each one has a manifest that describes which system capabilities are needed to start and the list of rights it possesses. Components and capabilities are wired together by the system server using the manifest. This architecture is mainly inspired by the Fuchsia operating system built by Google.</p>\n<h2>General Improvements</h2>\n<p>On top of everything stated above, the system received countless bug fixes and minor refinements, a documentations effort was started, and our build system got many improvements.</p>\n<h2>Acknowledgements And Contributing</h2>\n<p><img src=\"/articles/milestone-3/thanks.png\" alt=\"\"></p>\n<p>I (sleepy_monax) want to thank everyone who continued to help Brutal grow. Like every milestone before, I'd like to thank Supercyp for all his work around the system, Feliwir, who just joined the project and worked on Compression, Vector fonts, and the IO stack. And everyone else who contributed to this milestone!</p>\n<p>We welcome all contributions even if they don't fit into <a href=\"https://github.com/brutal-org/brutal/blob/main/meta/roadmap.md\">our milestones</a>. The Git repository is available <a href=\"https://github.com/brutal-org/brutal\">on GitHub</a>, and you can discuss the project on our <a href=\"http://discord.skiftos.org\">discord server</a>.</p>\n<p>Thanks for reading, and happy hacking :^)</p>\n",
            "url": "https://brutal.smnx.sh/articles/public/articles/milestone-4/content",
            "title": "Milestone 4",
            "summary": "The Year of the Brutal Desktop",
            "image": "https://brutal.smnx.sh/articles/milestone-4/cover.png",
            "author": {
                "name": "Sleepy Monax"
            }
        }
    ]
}